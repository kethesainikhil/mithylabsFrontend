import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import addUserApi, { getAllHotelsApi, getHotelByIdApi, getHotelsRecommendationsApi } from './AddUserApi';

const initialState = {
    countValue: 0,
    hotels:[],
    hotelInfo:{},
    hotelDetails:{
        visits:0,
        Drafts:0,
        Bookings:0
    },
    hotelRecommendations:[]
};
export const SORT_HOTEL_RECOMMENDATIONS = 'user/sortHotelRecommendations';
export const addUserAsync = createAsyncThunk(
  'user/addUserAsync',
  async (data) => {
    const res = await addUserApi(data)
    return res.data;
  }
);
export const sortHotelRecommendations = () => ({
    type: SORT_HOTEL_RECOMMENDATIONS
  });
export const getAllHotelsAsync = createAsyncThunk(
  'user/getAllHotels',
  async () => {
    const res = await getAllHotelsApi()
    return res;
  }
);
export const getHotelsRecommendationsAsync = createAsyncThunk(
  'user/getHotelsRecommendations',
  async () => {
    const res = await getHotelsRecommendationsApi()
    return res;
  }
);
export const getHotelByIdAsync = createAsyncThunk(
  'user/getHotelById',
  async (id) => {
    const res = await getHotelByIdApi(id)
    return res;
  }
);




export const addUserSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.countValue += 1;
    },
    incrementVisits: (state) => {   
    state.hotelDetails.visits += 1
    },
    incrementDrafts: (state) => {
      state.hotelDetails.Drafts += 1
    },
    incrementBookings: (state) => {
      state.hotelDetails.Bookings += 1
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addUserAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(addUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userDetails = action.payload

      })
      .addCase(getAllHotelsAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(getAllHotelsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.hotels = action.payload.data

      })
      .addCase(getHotelByIdAsync.pending, (state) => {
        state.hotelInfo = null;
        state.status = 'loading';

      })
      .addCase(getHotelByIdAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.hotelInfo = action.payload.data
        state.hotelDetails = action.payload.hotelData

      })
      .addCase(getHotelsRecommendationsAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(getHotelsRecommendationsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.hotelRecommendations = action.payload.data
      })
      .addCase(SORT_HOTEL_RECOMMENDATIONS, (state) => {
        // Sort the hotelRecommendations array based on your sorting logic
        state.hotelRecommendations.sort((a, b) => {
          const sumA = a.details.visits + a.details.Bookings + a.details.Drafts;
          const sumB = b.details.visits + b.details.Bookings + b.details.Drafts;
          return sumB - sumA; // Sort in descending order
        });
        // state.hotelRecommendations = state.hotelRecommendations.slice(0, 10);
      });
  },
});

export const { increment , incrementVisits, incrementDrafts, incrementBookings } = addUserSlice.actions;

export default addUserSlice.reducer;